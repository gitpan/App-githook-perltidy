.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GITHOOK-PERLTIDY 1"
.TH GITHOOK-PERLTIDY 1 "2013-09-27" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
githook\-perltidy \- run perltidy and podtidy before Git commits
.SH "VERSION"
.IX Header "VERSION"
0.11.1.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Make sure everyone uses the same tidy options across your project:
.PP
.Vb 4
\&    $ perltidy \-b \-w \-dop | grep \-v dump\-options > .perltidyrc
\&    $ echo \*(Aq\-\-columns 72\*(Aq > .podtidy\-opts
\&    $ git add .perltidyrc .podtidy\-opts
\&    $ git commit
.Ve
.PP
Install the pre-commit and post-commit hooks:
.PP
.Vb 1
\&    $ githook\-perltidy install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBgithook-perltidy\fR is a script that can be invoked by Git pre-commit
and post-commit hooks to run perltidy and podtidy on Perl and \s-1POD\s0
files (and optionally run make(1) targets), ensuring that your
project's code is always cleanly committed.
.PP
This script is is efficient: it only modifies Perl and \s-1POD\s0 files that
are being committed and not every file in your repository. It also
tries its hardest to be safe: the index and working tree are stashed
away beforehand, and restored in the event of failure.
.PP
There are three types of action this script will take as determed by
the first argument:
.IP "install [\-\-force, \-f] [\s-1MAKE\s0 \s-1ARGS\s0]" 4
.IX Item "install [--force, -f] [MAKE ARGS]"
Should be run from the command-line in the top-level directory of your
repository. Writes \fIpre-commit\fR and \fIpost-commit\fR files in the
\&\fI\f(CI$GIT_DIR\fI/hooks/\fR directory. Any \s-1MAKE\s0 \s-1ARGS\s0 given will be added to the
\&\f(CW\*(C`githook\-perltidy pre\-commit\*(C'\fR call.
.Sp
This command will fail if there is no .perltidyrc file in the
repository or if the hooks directory isn't found. It will also fail if
either of the hook files already exist, unless \f(CW\*(C`\-\-force\*(C'\fR is used.
.IP "pre-commit [\s-1MAKE\s0 \s-1ARGS\s0]" 4
.IX Item "pre-commit [MAKE ARGS]"
Called from a Git pre-commit hook.  Backs up your index and working
tree into a Git stash. Runs perltidy on any Perl files in the Git
index using the \fI.perltidyrc\fR. If \fI.podtidy\-opts\fR exists then
podtidy will also be run on any \s-1POD\s0 files in the Git index,
otherwise a warning is issued.
.Sp
If any \s-1MAKE\s0 \s-1ARGS\s0 are given they will be passed to a make call.  This
way you can ensure that your code passes a \f(CW\*(C`make test\*(C'\fR or \f(CW\*(C`make
disttest\*(C'\fR check before each commit.  If the \s-1PERLTIDY_MAKE\s0 environment
variable exists it will \fIoverride\fR any arguments. Setting
PERLTIDY_MAKE="" will skip the make call entirely.
.Sp
Failure of any of the above will result in a hard reset and the saved
stash popped (I.e. re-applied and deleted). The commit will be stopped.
On success the index is updated with the tidied files and the commit is
allowed to proceed.  In the event that your index was an interactive or
patched version of your working tree, the stash will be kept for the
post-commit hook. Otherwise it will be dropped.
.Sp
This command will fail if there is no .perltidyrc file in the
repository.
.IP "post-commit" 4
.IX Item "post-commit"
Called from a Git post-commit hook to re-apply stashed (but not
indexed) changes. In the event that your index was an interactive or
patched version of your working tree, the post-commit command does the
following:
.RS 4
.IP "\(bu" 4
checks out the \fIprevious\fR commit
.IP "\(bu" 4
pops the stash saved by the pre-commit command
.IP "\(bu" 4
tidies the files that were stashed
.IP "\(bu" 4
saves a new stash with the completely tidied files
.IP "\(bu" 4
checks out the \fIlatest\fR commit
.IP "\(bu" 4
pops the stash with the tidied files
.RE
.RS 4
.RE
.SH "CAVEATS"
.IX Header "CAVEATS"
There are two ways in which \fBgithook-perltidy\fR behaviour may affect
your existing workflow. Firstly if you are accustomed to commiting
changes to files which are still open in your editor, your editor may
complain that the underlying file has changed on disk. Possibily your
editor doesn't even detect the change and your next write will not be
\&'tidy'.
.PP
Secondly, aborting a commit with an empty commit message or via a later
command in the pre-commit hook will still result in changed (tidied)
files on disk and in the index.
.SH "FILES"
.IX Header "FILES"
.IP "\fI.perltidyrc\fR" 4
.IX Item ".perltidyrc"
Perltidy command options file.
.IP "\fI.podtidy\-opts\fR" 4
.IX Item ".podtidy-opts"
Podtidy command options file. This is githook-perltidy specific.
.IP "\fI.githook\-perltidy\fR" 4
.IX Item ".githook-perltidy"
A temporary file used to communicate between the pre-commit and
post-commit calls.
.SH "SUPPORT"
.IX Header "SUPPORT"
This tool is managed via github:
.PP
.Vb 1
\&    https://github.com/mlawren/githook\-perltidy
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
githooks(5), perltidy(1), podtidy(1)
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Lawrence <nomad@null.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2011\-2013 Mark Lawrence <nomad@null.net>
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 3 of the License, or (at your
option) any later version.
